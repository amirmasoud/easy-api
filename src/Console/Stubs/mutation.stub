<?php

declare(strict_types=1);

namespace DummyNamespace;

use App;
use Closure;
use GraphQL\Type\Definition\Type;
use Rebing\GraphQL\Support\Mutation;
use GraphQL\Type\Definition\ResolveInfo;

class DummyClass extends Mutation
{
    protected $attributes = [
        'name' => 'DummyName',
        'description' => 'DummyDescription'
    ];

    protected $instance;

    public function __construct()
    {
        $this->instance = new DummyModel;
    }

    public function type(): Type
    {
        return $this->instance->getMutationType();
    }

    public function args(): array
    {
        return $this->instance->getMutationFields();
    }

    public function resolve($root, $args, $context, ResolveInfo $resolveInfo, Closure $getSelectFields)
    {
        // return type need to be iterable.
        return [$root->updateOrCreate(['id' => $args['id'] ?? -1], $args)];
    }
}
