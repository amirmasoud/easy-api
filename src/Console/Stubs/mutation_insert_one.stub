<?php

declare(strict_types=1);

namespace DummyNamespace;

use App;
use Closure;
use GraphQL\Type\Definition\Type;
use Rebing\GraphQL\Support\Mutation;
use Rebing\GraphQL\Support\Facades\GraphQL;

use GraphQL\Type\Definition\ResolveInfo;

class DummyClass extends Mutation
{
    protected $attributes = [
        'name' => 'DummyName',
        'description' => 'DummyDescription'
    ];

    protected $instance;

    public function __construct()
    {
        $this->instance = new DummyModel;
    }

    public function type(): Type
    {
        return $this->instance->getMutationType();
    }

    public function args(): array
    {
        return [
            'object' => [
                'name' => 'object',
                'type' => GraphQL::type('{{ name }}InputMutation')
            ]
        ];
    }

    public function resolve($root, $args, $context, ResolveInfo $resolveInfo, Closure $getSelectFields)
    {
        // @todo: Not everyone are lucky enough to have a shiny id column.
        $id = $this->instance->getModel()::create($args['object'])->id;

        // Let the new born out in the wild.
        $root = $this->instance->newModel()->whereIn('id', [$id]);

        // return types are satisfied when they are iterable enough.
        return $this->instance->getQueryResolve($root, $args, $context, $resolveInfo, $getSelectFields)->get();
    }
}
