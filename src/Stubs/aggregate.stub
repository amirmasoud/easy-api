<?php

declare(strict_types=1);

namespace App\GraphQL\Types\Pepper;

use App;
use Closure;
use GraphQL\Type\Definition\Type;
use GraphQL\Type\Definition\ResolveInfo;
use Rebing\GraphQL\Support\Facades\GraphQL;
use Rebing\GraphQL\Support\Type as GraphQLType;

class {{ class }} extends GraphQLType
{
    protected $attributes = [
        'name' => '{{ name }}AggregateType',
        'description' => '{{ description }}'
    ];

    protected $instance;

    public function __construct()
    {
        $this->instance = new {{ model }};
    }

    public function fields(): array
    {
        return [
            'count' => [
                'type' => Type::int(),
                'selectable' => false,
                'resolve' => function ($root, $args, $context, ResolveInfo $resolveInfo) {
                    if (method_exists($root['root'], $root['name'])) {
                        return $root['root']->{$root['name']}->count();
                    } else {
                        return 1;
                    }
                },
            ],
            'sum' => [
                'type' => GraphQL::type('TagType'),
                'selectable' => false,
                'resolve' => function ($root, $args, $context, ResolveInfo $resolveInfo) {
                    // print_r($getSelectFields);
                    // die();
                    // return $root['root']->{$root['name']}->sum('id');
                    // print_r($root['root']->{$root['name']}->sum('id'));
                    // if (method_exists($root['root'], $root['name'])) {
                    //     return $root['root']->{$root['name']}->count();
                    // } else {
                    //     return 1;
                    // }
                },
            ],
        ];
    }
}
